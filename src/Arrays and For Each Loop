public class Arrays {
    public static void main(String[] args) {
         /*Classroom of 500 students - You have to store marks of these 500 students
        You have 2 options:
        1. Create 500 variables
        2. Use Arrays (recommended)*/

        // There are three main ways to create an array in Java
        // 1. Declaration and memory allocation
        // int [] marks = new int[5];

        // 2. Declaration and then memory allocation
        // int [] marks;
        // marks = new int[5];
        // Initialization
        // marks[0] = 100;
        // marks[1] = 60;
        // marks[2] = 70;
        // marks[3] = 90;
        // marks[4] = 86;

        // 3. Declaration, memory allocation and initialization together
        int [] marks = {98, 45, 79, 99, 80};

        // marks[5] = 96; - throws an error
        System.out.println(marks[4]);
    }
}

/*
Java Tutorial: Introduction to Arrays

 1.An array is a collection of similar types of data having contiguous memory allocation.
2.The indexing of the array starts from 0., i.e 1st element will be stored at the 0th index, 2nd element at 1st index, 3rd at 2nd index, and so on.
3.The size of the array can not be increased at run time therefore we can store only a fixed size of elements in array.
Use Case: Storing marks of 5 students


Accessing Array Elements :
Array elements can be accessed as follows:

marks[0] = 100       //Note that index starts from 0
marks[1] = 70
.
.
marks[4] = 98


        So in a nut shell, this is how array works:

        1.int[] marks; //Declaration!
        2.marks = new int[5];           //Memory allocation!
        3.int[] marks = new int[5]; //Declaration + Memory allocation!
        4.int[] marks = {100,70,80,71,98} // Declare + Initialize!
        Note : Array indices start from 0 and go till (n-1) where n is the size of the array.

        Array length :
        Unlike C/C++, we don't need to use the sizeof() operator to get the length of arrays in Java because arrays are
        objects in Java therefore we can use the length property.

        marks.length //Gives 5 if marks is a reference to an array with 5 elements

        Displaying an Array :
        An array can be displayed using a for loop:

        for (int i=0; i<marks.length; i++)
        {
        Sout(marks[i]);    //Array Traversal */
        }



//  FOR EACH LOOP PROGRAM

        /*
        float [] marks = {98.5f, 45.5f, 79.5f, 99.5f, 80.5f};
        String [] students ={"Harry", "Rohan", "Shubham", "Lovish"};
        System.out.println(students.length);
        System.out.println(students[2]);


        int [] marks = {98, 45, 79, 99, 80};
        // System.out.println(marks.length);

        // Displaying the Array (Naive way)
        System.out.println("Printing using Naive way");
        System.out.println(marks[0]);
        System.out.println(marks[1]);
        System.out.println(marks[2]);
        System.out.println(marks[3]);
        System.out.println(marks[4]);

        // Displaying the Array (for loop)
        System.out.println("Printing using for loop");
        for(int i=0;i<marks.length;i++){
            System.out.println(marks[i]);
        }

        // Quick Quiz: Displaying the Array in Reverse order (for loop)
        System.out.println("Printing using for loop in reverse order");
        for(int i=marks.length -1;i>=0;i--){
            System.out.println(marks[i]);
        }

        // Quick Quiz: Displaying the Array (for-each loop)
        System.out.println("Printing using for-each loop");
        for(int element: marks){
            System.out.println(element);
        }



    Java Tutorial: For Each Loop in Java
  1.For each loop is an enhanced version of for loop.
   2.It travels each element of the data structure one by one.
   3.Note that you can not skip any element in for loop and it is also not possible to traverse elements
   in reverse order with the help of for each loop.
    4.It increases the readability of the code.
    5.If you just want to simply traverse an array from start to end then it is recommended to use for each loop.


Syntax :
/* for (int element:Arr) {
            Sout(element);    //Prints all the elements
}


    Example :

         class CWH_forEachLoop{
    public static void main(String args[]){
        //declaring an array
        int arr[]={1,2,3,3,4,5};
        //traversing the array with for-each loop
        for(int i:arr){
            System.out.println(i);
        }

Output :
        1
        2
        3
        4
        5  */


